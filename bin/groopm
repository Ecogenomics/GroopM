#!/usr/bin/env python
###############################################################################
#                                                                             #
#    groopm                                                                   #
#                                                                             #
#    Entry point. See groopm/groopm.py for internals                          #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#          .d8888b.                                    888b     d888          #
#         d88P  Y88b                                   8888b   d8888          #
#         888    888                                   88888b.d88888          #
#         888        888d888 .d88b.   .d88b.  88888b.  888Y88888P888          #
#         888  88888 888P"  d88""88b d88""88b 888 "88b 888 Y888P 888          #
#         888    888 888    888  888 888  888 888  888 888  Y8P  888          #
#         Y88b  d88P 888    Y88..88P Y88..88P 888 d88P 888   "   888          #
#          "Y8888P88 888     "Y88P"   "Y88P"  88888P"  888       888          #
#                                             888                             #
#                                             888                             #
#                                             888                             #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012"
__credits__ = ["Michael Imelfort"]
__license__ = "GPL3"
__version__ = "0.0.1"
__maintainer__ = "Michael Imelfort"
__email__ = "mike@mikeimelfort.com"
__status__ = "Development"

###############################################################################

import argparse
import sys
from groopm import groopm

###############################################################################
###############################################################################
###############################################################################
###############################################################################
if __name__ == '__main__':
    # intialise the options parser
    parser = argparse.ArgumentParser(description='[[GroopM]] - Metagenomic binning tools')
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    ##################################################
    # regular modes    
    ##################################################
    # parse raw data and save
    parse_parser = subparsers.add_parser('parse', help='parse raw data and save to DB')
    parse_parser.add_argument('bamfiles', help="comma separated list of bam files to parse")
    parse_parser.add_argument('reference', help="fasta file containing bam reference sequences")
    parse_parser.add_argument('dbname', help="name of the database being created")
    parse_parser.add_argument('-d', '--dump', action="store_true", default=False, help="dump the contents of all tables to screen")
    parse_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing DB file without prompting")
        
    # load saved data and make bin cores
    core_parser = subparsers.add_parser('core', help='load DB and make bin cores')
    core_parser.add_argument('dbname', help="name of the database to open")
    core_parser.add_argument('-c', '--cutoff', default=10000, help="cutoff size for core creation. Default 10000")
    core_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing DB file without prompting")
    core_parser.add_argument('-D', '--plot', action="store_true", default=False, help="create plots during core creation. Default: no plots")
    core_parser.add_argument('-s', '--size', default=5, help="minimum number of contigs which define a core. Default: 5")
    core_parser.add_argument('-b', '--bp', default=1000000, help="cumulative size of contigs which define a core regardless of number of contigs. Default: 1000000")

    # load cores and visualise
    core_validator = subparsers.add_parser('coreval', help='validate cores')
    core_validator.add_argument('dbname', help="name of the database to open")
    core_validator.add_argument('-c', '--cutoff', default=10000, help="cutoff size for core creation. Default 10000")

    # load saved data and enlarge bins
    expand_parser = subparsers.add_parser('expand', help='load DB and enlarge bins')
    expand_parser.add_argument('dbname', help="name of the database to open")
    expand_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing db file without prompting")
    expand_parser.add_argument('-D', '--plot', action="store_true", default=False, help="create plots during bin expansion. Default: no plots")
    
    # get output!       
    print_parser = subparsers.add_parser('print', help='print bin information')
    print_parser.add_argument('dbname', help="name of the database to open")
    print_parser.add_argument('-b', '--bins', default="", help="comma separated list of bin numbers to print")
    print_parser.add_argument('-o', '--outfile', default="", help="print to file. Default: stdout")
    print_parser.add_argument('-f', '--format', default='full', help="output format [full, minimal, summary]. default: 'full'")
    print_parser.add_argument('-u', '--unbinned', action="store_true", default=False, help="print unbinned contig IDs too. Default: only binned")
    
    # TODO - implement these modes

    # parse and bin in one step
    #complete_parser = subparsers.add_parser('complete', help='all stages in one step')

    ##################################################
    # interactive mode
    ##################################################
    #interactive_parser = subparsers.add_parser('prompt', help='jump to interactive shell')

    ##################################################
    # batch mode
    ##################################################
    #batch_parser = subparsers.add_parser('batch', help='run commands in batch mode')
    #batch_parser.add_argument('batch_script', help="batch commands to be executed sequentially")
        
    # get and check options
    args = parser.parse_args()

    # do what we came here to do
    try:
        GM_parser = groopm.GroopMOptionsParser()
        GM_parser.parseOptions(args)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise
    
###############################################################################
###############################################################################
###############################################################################
###############################################################################
        