#!/usr/bin/env python
###############################################################################
#                                                                             #
#    groopm                                                                   #
#                                                                             #
#    Entry point. See groopm/groopm.py for internals                          #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#          .d8888b.                                    888b     d888          #
#         d88P  Y88b                                   8888b   d8888          #
#         888    888                                   88888b.d88888          #
#         888        888d888 .d88b.   .d88b.  88888b.  888Y88888P888          #
#         888  88888 888P"  d88""88b d88""88b 888 "88b 888 Y888P 888          #
#         888    888 888    888  888 888  888 888  888 888  Y8P  888          #
#         Y88b  d88P 888    Y88..88P Y88..88P 888 d88P 888   "   888          #
#          "Y8888P88 888     "Y88P"   "Y88P"  88888P"  888       888          #
#                                             888                             #
#                                             888                             #
#                                             888                             #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012"
__credits__ = ["Michael Imelfort"]
__license__ = "GPL3"
__version__ = "0.0.1"
__maintainer__ = "Michael Imelfort"
__email__ = "mike@mikeimelfort.com"
__status__ = "Development"

###############################################################################

import argparse
import sys
from groopm import groopm
from groopm import torusMesh

###############################################################################
###############################################################################
###############################################################################
###############################################################################
if __name__ == '__main__':

    # intialise the options parser
    parser = argparse.ArgumentParser(description='[[GroopM]] - Metagenomic binning tools')
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    ##################################################
    # Modes    
    ##################################################
    # parse raw data and save
    file_parser = subparsers.add_parser('parse', help='parse raw data and save to DB')
    file_parser.add_argument('dbname', help="name of the database being created")
    file_parser.add_argument('reference', help="fasta file containing bam reference sequences")
    file_parser.add_argument('bamfiles', nargs='+', help="bam files to parse")
    file_parser.add_argument('-d', '--dump', action="store_true", default=False, help="dump the contents of all tables to screen")
    file_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing DB file without prompting")
        
    # load saved data and make bin cores
    core_builder = subparsers.add_parser('core', help='load DB and make bin cores')
    core_builder.add_argument('dbname', help="name of the database to open")
    core_builder.add_argument('-c', '--cutoff', default=10000, help="cutoff size for core creation. default 10000")
    core_builder.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing DB file without prompting")
    core_builder.add_argument('-D', '--plot', action="store_true", default=False, help="create plots during core creation. default: no plots")
    core_builder.add_argument('-s', '--size', default=5, help="minimum number of contigs which define a core. default: 5")
    core_builder.add_argument('-b', '--bp', default=1000000, help="cumulative size of contigs which define a core regardless of number of contigs. default: 1000000")

    # refine bins
    bin_refiner = subparsers.add_parser('refine', help='merge similar bins / split chimeric ones')
    bin_refiner.add_argument('dbname', help="name of the database to open")
    bin_refiner.add_argument('-p', '--plotter', action="store_true", default=False, help="use global 3d plots")
    bin_refiner.add_argument('-m', '--manual', action="store_true", default=False, help="do everything manually")

    # load saved data and enlarge bins
    bin_expander = subparsers.add_parser('expand', help='load DB and enlarge bins')
    bin_expander.add_argument('dbname', help="name of the database to open")
    bin_expander.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing db file without prompting")
    bin_expander.add_argument('-D', '--plot', action="store_true", default=False, help="create plots during bin expansion. default: no plots")

    # extract reads and contigs from saved
    bin_extractor = subparsers.add_parser('extract', help='extract contigs and reads based on bins')
    bin_extractor.add_argument('dbname', help="name of the database to open")
    bin_extractor.add_argument('data', nargs='+', help="data file(s) to extract from, bam or fasta")
    bin_extractor.add_argument('-m', '--mode', default="contigs", help="what to extract [reads, contigs]. default: 'contigs'")
    bin_extractor.add_argument('-f', '--outfolder', default="", help="write to this folder. default: current dir")
    bin_extractor.add_argument('-b', '--bids', nargs='+', type=int, help="bin ids to use. default: all bins")
    bin_extractor.add_argument('-c', '--cutoff', default=0, help="cutoff size, ignored for reads. default: no cutoff")
    bin_extractor.add_argument('-s', '--shuffle', action="store_true", default=False, help="shuffle reads file, ignored for contigs or unpaired reads. default: no shuffle")

    # combine two or more bins into one
    bin_merger = subparsers.add_parser('merge', help='merge 2 or more bins')
    bin_merger.add_argument('dbname', help="name of the database to open")
    bin_merger.add_argument('bids', nargs='+', type=int, help="bin ids to merge.")
    bin_merger.add_argument('-a', '--auto', action="store_true", default=False, help="merge without prompting")
    
    # split a bin into two parts
    bin_splitter = subparsers.add_parser('split', help='split a bin into n pieces') 
    bin_splitter.add_argument('dbname', help="name of the database to open")
    bin_splitter.add_argument('bid', type=int, help="bin id to split")
    bin_splitter.add_argument('parts', type=int, help="number of parts to split the bin into")
    bin_splitter.add_argument('-m', '--mode', default="kmer", help="profile to split on 'kmer' or 'cov'. default: kmer")
    bin_splitter.add_argument('-a', '--auto', action="store_true", default=False, help="merge without prompting")
    
    # split a bin into two parts
    bin_deleter = subparsers.add_parser('delete', help='delete bins') 
    bin_deleter.add_argument('dbname', help="name of the database to open")
    bin_deleter.add_argument('bids', nargs='+', type=int, help="bin ids to delete")
    bin_deleter.add_argument('-f', '--force', action="store_true", default=False, help="skip prompting")
    
    # load bins and visualise
    bin_explorer = subparsers.add_parser('explore', help='explore and validate bins')
    bin_explorer.add_argument('dbname', help="name of the database to open")
    bin_explorer.add_argument('-c', '--cutoff', default=10000, help="cutoff size. default 10000")
    bin_explorer.add_argument('-m', '--mode', default="points", help="Exploration mode [ids, points, profile, compare, flyover, unbinned] default: 'points'")
    bin_explorer.add_argument('-b', '--bids', nargs='+', type=int, help="bin ids to plot. default: all bins")

    # print bin information       
    bin_printer = subparsers.add_parser('print', help='print bin information')
    bin_printer.add_argument('dbname', help="name of the database to open")
    bin_printer.add_argument('-b', '--bids', nargs='+', type=int, help="bin ids to print. default: all bins")
    bin_printer.add_argument('-o', '--outfile', default="", help="print to file. default: stdout")
    bin_printer.add_argument('-f', '--format', default='summary', help="output format [full, minimal, summary]. default: 'summary'")
    bin_printer.add_argument('-u', '--unbinned', action="store_true", default=False, help="print unbinned contig IDs too. default: only binned")

    # plot a bin/bins
    bin_plotter = subparsers.add_parser('plot', help='plot bins')
    bin_plotter.add_argument('dbname', help="name of the database to open")
    bin_plotter.add_argument('-b', '--bids', nargs='+', type=int, help="bin ids to plot. default: all bins")
    bin_plotter.add_argument('-s', '--sidebyside', action="store_true", default=False, help="plot bins in 3d side by side. default: print to file")
    bin_plotter.add_argument('-t', '--tag', default="BIN", help="tag to add to output filename")
    
    # TODO - implement these modes

    # parse and bin in one step
    #complete_parser = subparsers.add_parser('complete', help='all stages in one step')

    ##################################################
    # interactive mode
    ##################################################
    #interactive_parser = subparsers.add_parser('prompt', help='jump to interactive shell')

    ##################################################
    # batch mode
    ##################################################
    #batch_parser = subparsers.add_parser('batch', help='run commands in batch mode')
    #batch_parser.add_argument('batch_script', help="batch commands to be executed sequentially")
        
    # get and check options
    args = parser.parse_args()

    # do what we came here to do
    try:
        GM_parser = groopm.GroopMOptionsParser()
        GM_parser.parseOptions(args)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise
    
###############################################################################
###############################################################################
###############################################################################
###############################################################################
        